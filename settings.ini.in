[vigiconf]

; Dossier contenant la configuration du parc supervisé.
confdir = @SYSCONFDIR@/vigilo/vigiconf/conf.d

; Dossier de travail pour la génération des fichiers de configuration.
libdir = @LOCALSTATEDIR@/lib/vigilo/vigiconf

; Dossier final des fichiers de configuration
; sur les serveurs de supervision.
targetconfdir = @SYSCONFDIR@/vigilo/vigiconf

; Dossier contenant des modules complémentaires pour VigiConf.
pluginsdir = @SYSCONFDIR@/vigilo/vigiconf/plugins

; Emplacement du socket UNIX sur les machines
; où le connecteur-nagios est installé.
socket_nagios_to_vigilo = @LOCALSTATEDIR@/lib/vigilo/connector-nagios/send.sock

; Emplacement du fichier contenant le verrou de VigiConf.
lockfile = @LOCALSTATEDIR@/lock/vigilo-vigiconf/vigiconf.token

; Emplacement du dépôt SVN contenant l'historique
; de la configuration du parc supervisé.
svnrepository = http://svnrepo/path/to/svn/repo

; Nom d'utilisateur pour l'accès au dépôt SVN.
svnusername = vigiconf

; Mot de passe pour l'accès au dépôt SVN.
svnpassword = svnpass

; Mode de débogage.
; Dans ce mode, les opérations ne sont pas validées.
simulate = False

[database]
sqlalchemy_url = postgres://vigilo:vigilo@localhost/vigilo
db_basename = vigilo_
external_auth=False

# affichage des requetes SQL (debug)
#sqlalchemy_echo = false
#sqlalchemy_echo_pool = false
#sqlalchemy_pool_recycle = 3600


[bus]
# Nom ou adresse IP du serveur XMPP à utiliser.
host = localhost
# Nom du service de publication pour les messages.
service = pubsub.localhost
# Nom d'utilisateur à utiliser pour se connecter au bus.
jid = vigiconf@localhost/vigiconf
# Mot de passe associé au jid donné.
password = vigiconf
# Indique si un chiffrement de la connexion est obligatoire (True)
# ou simplement préféré (False). Dans tous les cas, une connexion
# TLS sera créée lorsque c'est possible.
require_tls = False
# Liste des noms des topics auxquels le connecteur est abonné,
# séparés par des virgules.
# Si la liste est vide, mettre uniquement une virgule.
subscriptions = ,
# Le trafic lié au bus XMPP doit-il être enregistré dans les logs ?
log_traffic = False

[connector]
# Nom d'hôte utilisé pour signaler à Vigilo que ce connecteur fonctionne
# correctement. Cela doit correspondre au nom d'hôte configuré dans VigiConf
# pour cette machine. Par défaut, on utilise le nom d'hôte court (sans le
# domaine DNS)
#hostname = hostname

[publications]
# Noms des messages XML traités avec pour chaque type de message
# le nom du nœud XMPP sur lesquel les messages de ce type sont envoyés.
perf = /vigilo/perf
command = /vigilo/command
# Dans vigiconf, la publication est utilisée pour diffuser l'état du connecteur
# à Nagios

#
# LOGGING
#
[loggers]
keys=root,sqlalchemy

[handlers]
keys=console,syslog

[formatters]
keys=consoleFormatter,syslogFormatter

[logger_root]
level=INFO
handlers=console,syslog

[logger_sqlalchemy]
# mettre le level a INFO pour afficher les requetes SQL
level = WARNING
handlers = console
qualname = sqlalchemy.engine
propagate = 0

[handler_console]
class=StreamHandler
level=DEBUG
formatter=consoleFormatter
args=(sys.stdout, )

[handler_syslog]
class=handlers.SysLogHandler
level=DEBUG
formatter=syslogFormatter
# Le premier argument correspond à l'emplacement du syslog.
# Il peut s'agir d'un fichier (ex : socket Unix, '/dev/log')
# ou d'une adresse IP avec un port, auquel cas il faut saisir
# le tout sous forme de tuple (args=('127.0.0.1', 514), 'daemon').
#
# Le 2ème argument correspond à la facility à utiliser lors
# de l'envoi à syslog (voir logger(1) pour la liste des noms
# des facilities).
args='/dev/log', 'daemon'

[formatter_consoleFormatter]
format=%(message)s
datefmt=
class=vigilo.common.logging.VigiloFormatter

[formatter_consoleFormatter_verbose]
format=[%(created)f] %(levelname)s::%(name)s::%(message)s
datefmt=
class=vigilo.common.logging.VigiloFormatter

[formatter_syslogFormatter]
format=%(processName)s[%(process)d]: %(levelname)s::%(name)s::%(message)s
datefmt=
class=vigilo.common.logging.VigiloFormatter

